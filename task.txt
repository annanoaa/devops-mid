Midterm Project – DevOps Pipeline (Local
Environment)
Deadline: 23.04.2025 23:59
On the first lecture after the deadline, you should present your project
and answer some theoretical questions. Missing the presentation means 0
points for the midterm.
Objective
The goal of this midterm project is to design and implement a simplified DevOps pipeline
using local resources. You will create a small web application and apply DevOps principles
such as version control, automated testing, CI/CD, and Infrastructure as Code (IaC), all
without using Docker or cloud platforms.
This is a hands-on project, meant to simulate real DevOps work in a local development
environment. Everything should run on your machine or on local virtual machines (like
VirtualBox), and you’ll use tools such as Git, GitHub Actions (or GitLab CI), and Ansible
or Terraform.

What You Need to Build
1. Web Application
• Build a small web application using Flask, Node.js, or similar.
• It must include at least one dynamic route and one input (e.g., a form).
• Write at least one unit test (e.g., test a route or a function).
2. Version Control with Git
• Use Git for version control and push your code to GitHub or GitLab.
• Work with at least two branches: main and dev.
• Write clean commit messages and make frequent commits.
3. Continuous Integration
• Set up a CI pipeline using GitHub Actions or GitLab CI.
• Your pipeline should run tests automatically on push or PR.
• Optional: Include linting or syntax checks.
1

4. Infrastructure as Code
• Use Ansible or Terraform to configure your local environment.
• Automate software installation and deployment steps.
• Example: Install Python/Node.js, create folders, and copy project files.
5. Continuous Deployment
• Set up a simulated deployment pipeline (locally).
• Deploy to a ”production” folder or VM.
• Demonstrate a simple strategy like Blue-Green deployment (e.g., switching folders).
• Add a basic rollback mechanism (script or manual step).
6. Monitoring and Health Check
• Create a simple script that checks if your app is running (e.g., curl check).
• Log the results to a file.
7. Documentation
• Include a clear README file in your repository:
– Brief project description.
– Tools and technologies used.
– CI/CD and IaC explanation.
– Screenshots of deployment, pipeline, and app.
– A simple diagram of your workflow (can be hand-drawn and scanned).

Final Deliverables
Before the deadline, submit the following:
1. A link to your GitHub or GitLab repository.
2. A working local app deployment or screenshots as proof.
3. A complete README with documentation.
4. A PDF file that includes:
• Screenshots of key steps (e.g., test results, CI run, app running, deployment).
• Each screenshot must include a short comment or explanation.
(Same format as your homework submissions.)
• Example: “Screenshot 1: GitHub Actions CI test passed after pushing to dev
branch.”
2

Optional Bonus (+10 marks)
• Use both Ansible and Terraform together.
• Add a simple status display or visual dashboard.
• Automate rollback based on health check results.

Good luck, and enjoy the process of building your first full DevOps pipeline!

3

